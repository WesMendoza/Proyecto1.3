package Vista;

import Control.NotasparaEstudiantes;
import Model.BuscarEstudiantes;
import Model.DatosEstudiantes;
import Model.Estudiantes;
import Model.GestorEstudiantes;
import Control.MateriaController;
import Model.Tabla_Notas;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author Mendoza Soledispa Wesner
 */
public class NotasEstudiantes extends javax.swing.JFrame {
    //Buscar Estudiantes 
    private BuscarEstudiantes gestorEstudiantes;
    private MateriaController materiaController;
    
    public NotasEstudiantes() {
        initComponents();
        gestorEstudiantes = new BuscarEstudiantes();
        materiaController = new MateriaController();
        llenarComboBoxMaterias();
        cmbMaterias.setEnabled(false);
        habilitarCamposNotas(false);

        btnBuscar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                buscarAlumno();
            }
        });
        DatosE = NotasparaEstudiantes.getDestudiantes();
        modeltable = new Tabla_Notas(DatosE);
        jtNotas.setModel(modeltable);
    }

    private void llenarComboBoxMaterias() {
        List<String> nombresMaterias = materiaController.getMateriasNombres();
        cmbMaterias.removeAllItems();
        for (String nombre : nombresMaterias) {
            cmbMaterias.addItem(nombre);
        }
    }
    private void buscarAlumno() {
        String cedula = txtBuscarCedula.getText().trim();

        // Validar longitud de la cedula
        if (cedula.length() != 10) {
            JOptionPane.showMessageDialog(this, "La cédula debe tener 10 dígitos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Buscar estudiante por cedula
        Estudiantes estudiante = gestorEstudiantes.buscarEstudiantePorCedula(cedula);

        if (estudiante != null) {
        // Mostrar información del estudiante en los JTextFields correspondientes
            txtNombre.setText(estudiante.getNombre());
            txtApellido.setText(estudiante.getApellido());
            txtCarrera.setText(estudiante.getCarrera());
            txtSemestre.setText(String.valueOf(estudiante.getSemestre()));
            
            cmbMaterias.setEnabled(true);
            habilitarCamposNotas(true);

        } else {
            // Mostrar mensaje si la cedula no existe
            JOptionPane.showMessageDialog(this, "No existe un estudiante con esa cédula", "Error", JOptionPane.ERROR_MESSAGE);
            limpiarCampos();
            habilitarCamposNotas(false);
        }
    }
    //Campos notas Enable
    private void habilitarCamposNotas(boolean habilitar) {
        txtnota1.setEnabled(habilitar);
        txtnota2.setEnabled(habilitar);
        btnCalcular.setEnabled(habilitar);
        bttGuardarNotas.setEnabled(habilitar);
         
    }

    /**
     * Limpiar campos
     */
    private void limpiarCampos() {
            txtNombre.setText("");
            txtApellido.setText("");
            txtCarrera.setText("");
            txtSemestre.setText("");
            txtBuscarCedula.setText("");
            txtnota1.setText("");
            txtnota2.setText("");
            txtpromedio.setText("");
            txtestado.setText("");
            cmbMaterias.setEnabled(false);
            habilitarCamposNotas(false);
    }
    /**
     * Método para agregar Notas 
     */
    private List<DatosEstudiantes> DatosE;
    private Tabla_Notas modeltable;
    //Campos para editar
    private DatosEstudiantes estudianteSeleccionado;
    
    // Actualizar la tabla
    private void actualizarFilaEnTabla(DatosEstudiantes estudiante) {
    int index = DatosE.indexOf(estudiante);
    if (index != -1) {
        jtNotas.setValueAt(estudiante.getParcial1(), index, 4); // Columna de Parcial1
        jtNotas.setValueAt(estudiante.getParcial2(), index, 5); // Columna de Parcial2
        jtNotas.setValueAt(estudiante.getPromedio(), index, 6); // Columna de Promedio
        jtNotas.setValueAt(estudiante.getEstado(), index, 7);   // Columna de Estado
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtBuscarCedula = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtCarrera = new javax.swing.JTextField();
        txtSemestre = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtnota1 = new javax.swing.JTextField();
        txtnota2 = new javax.swing.JTextField();
        txtpromedio = new javax.swing.JTextField();
        txtestado = new javax.swing.JTextField();
        bttGuardarNotas = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtNotas = new javax.swing.JTable();
        btnCalcular = new javax.swing.JButton();
        cmbMaterias = new javax.swing.JComboBox<>();
        btnEditar = new javax.swing.JButton();
        btnGuardarCambios = new javax.swing.JButton();
        bttVernotas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registro de Notas ");

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Registro de Notas ");

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jButton1)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel2.setText("Cedula:");

        txtBuscarCedula.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBuscarCedulaKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel3.setText("Nombre:");

        jLabel4.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel4.setText("Apellido:");

        jLabel5.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel5.setText("Carrera:");

        jLabel6.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel6.setText("Semestre:");

        jLabel7.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel7.setText("Materia:");

        txtNombre.setEditable(false);

        txtApellido.setEditable(false);

        txtCarrera.setEditable(false);

        txtSemestre.setEditable(false);

        jLabel8.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel8.setText("Parcial 1:");

        jLabel9.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel9.setText("Parcial 2:");

        jLabel10.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel10.setText("Promedio:");

        jLabel11.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        jLabel11.setText("Estado:");

        txtnota1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtnota1KeyTyped(evt);
            }
        });

        txtnota2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtnota2KeyTyped(evt);
            }
        });

        txtpromedio.setEditable(false);

        txtestado.setEditable(false);

        bttGuardarNotas.setText("Registrar");
        bttGuardarNotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttGuardarNotasActionPerformed(evt);
            }
        });

        btnBuscar.setText("Buscar");

        jtNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Apellido", "Nombre", "Materia", "Parcial 1", "Parcial 2", "Promedio", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jtNotas);

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        cmbMaterias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMateriasActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnGuardarCambios.setText("Actualizar");
        btnGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCambiosActionPerformed(evt);
            }
        });

        bttVernotas.setText("Notas");
        bttVernotas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttVernotasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(18, 18, 18)
                            .addComponent(txtBuscarCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(50, 50, 50)
                            .addComponent(btnBuscar))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombre)
                                .addComponent(txtApellido, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE))
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel5))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtCarrera)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtnota1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtnota2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(43, 43, 43)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel10)
                                .addComponent(jLabel11))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txtpromedio)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnCalcular))
                                .addComponent(txtestado, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(18, 18, 18)
                            .addComponent(cmbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(bttGuardarNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnEditar)
                        .addGap(18, 18, 18)
                        .addComponent(btnGuardarCambios)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bttVernotas, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnEditar)
                            .addComponent(bttGuardarNotas, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnGuardarCambios)
                            .addComponent(bttVernotas)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtBuscarCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBuscar))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txtCarrera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txtSemestre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cmbMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(txtnota1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtpromedio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCalcular))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(txtnota2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtestado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Main regresar= new Main();
        regresar.setVisible(true);
        //this.setVisible(false);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        try {
        float nota1 = Float.parseFloat(txtnota1.getText().trim());
        float nota2 = Float.parseFloat(txtnota2.getText().trim());
        if (nota1 < 0 || nota1 > 10 || nota2 < 0 || nota2 > 10) {
            JOptionPane.showMessageDialog(this, "Por favor, Ingrese notas validas" , "Entre 0 y 10", JOptionPane.INFORMATION_MESSAGE);
            txtestado.setText("Ingrese notas válidas (0-10)");
            txtpromedio.setText("");
            return;
        }
        
        float promedio = (nota1 + nota2) / 2;
        
        // Redondear a un decimal
        BigDecimal bd = new BigDecimal(Float.toString(promedio));
        bd = bd.setScale(1, RoundingMode.HALF_UP);
        float promedioRedondeado = bd.floatValue();
        
        String estado = promedioRedondeado >= 7 ? "Aprobado" : "Reprobado";
        
        txtpromedio.setText(String.valueOf(promedioRedondeado));
        txtestado.setText(estado);
    } catch (NumberFormatException e) {
        txtestado.setText("Ingrese notas válidas");
        JOptionPane.showMessageDialog(this, "Por favor, Ingrese notas validas(Entre 0 - 10)" , "Error ingreso de notas", JOptionPane.INFORMATION_MESSAGE);
        txtpromedio.setText("");
    }
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void cmbMateriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMateriasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMateriasActionPerformed

    private void bttGuardarNotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttGuardarNotasActionPerformed
        if (validarCampos()) {
            int confirmar = JOptionPane.showConfirmDialog(this, "¿Desea registrar las notas del estudiante?", "Confirmar", JOptionPane.YES_NO_OPTION);
            if (confirmar == JOptionPane.YES_OPTION) {
                String cedula = txtBuscarCedula.getText().trim();
                String nombre = txtNombre.getText().trim();
                String apellido = txtApellido.getText().trim();
                String carrera = txtCarrera.getText().trim();
                int semestre = Integer.parseInt(txtSemestre.getText().trim());
                String materia = cmbMaterias.getSelectedItem().toString();
                float nota1 = Float.parseFloat(txtnota1.getText().trim());
                float nota2 = Float.parseFloat(txtnota2.getText().trim());
                float promedio = Float.parseFloat(txtpromedio.getText().trim());
                String estado = txtestado.getText().trim();

                DatosEstudiantes nuevoEstudiante = new DatosEstudiantes(cedula, nombre, apellido, materia, nota1, nota2, promedio, estado);
                DatosE.add(nuevoEstudiante);
                modeltable.fireTableDataChanged();//actualiza modelo de la tabla
                limpiarCampos();//limpiar campos
            }
        }
    }

    private boolean validarCampos() {
        if (txtBuscarCedula.getText().trim().isEmpty() || 
            txtNombre.getText().trim().isEmpty() || 
            txtApellido.getText().trim().isEmpty() || 
            txtCarrera.getText().trim().isEmpty() || 
            txtSemestre.getText().trim().isEmpty() || 
            txtnota1.getText().trim().isEmpty() || 
            txtnota2.getText().trim().isEmpty() || 
            txtpromedio.getText().trim().isEmpty() || 
            txtestado.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, llene todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }//GEN-LAST:event_bttGuardarNotasActionPerformed

    private void txtBuscarCedulaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarCedulaKeyTyped
        // Obtener el texto actual en el campo de la cédula
        String currentText = txtBuscarCedula.getText();
        // Obtener el carácter que se está ingresando
        char c = evt.getKeyChar();
        // Verificar si el carácter es un dígito y si la longitud actual es menor que 10
        if (!Character.isDigit(c) || currentText.length() >= 10) {
            // Si el carácter no es un dígito o la longitud excede 10, consumir el evento
            evt.consume();
        }
    }//GEN-LAST:event_txtBuscarCedulaKeyTyped

    private void txtnota1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnota1KeyTyped
        // TODO add your handling code here:
        // Obtener el carácter ingresado por el usuario
    char key = evt.getKeyChar();

    // Verificar si el carácter es un número, un punto decimal o la tecla de retroceso
    boolean esNumero = (key >= '0' && key <= '9');
    boolean esPunto = (key == '.');
    boolean esBorrar = (key == '\b');

    // Permitir solo números y un punto decimal
    if (!esNumero && !esPunto && !esBorrar) {
        evt.consume(); // Consumir el evento para evitar que se ingrese el carácter
    }

    // Verificar si ya hay un punto decimal en el texto
    String text = txtnota1.getText();
    boolean tienePunto = text.contains(".");

    // Permitir solo un punto decimal
    if (tienePunto && esPunto) {
        evt.consume(); // Consumir el evento si ya hay un punto decimal en el texto
    }

    // Verificar si la longitud total del texto es mayor que 4 (dos enteros y dos decimales)
    if (text.replace(".", "").length() >= 4 && key != '\b') {
        evt.consume(); // Consumir el evento para evitar que se ingrese más caracteres
    }

    // Verificar si el texto ingresado representa un número válido en el rango de 0 a 10
    try {
        String textAfter = text + key;
        float nota = Float.parseFloat(textAfter); // Convertir el texto a un número flotante
        if (nota < 0 || nota > 10) {
            evt.consume(); // Consumir el evento si la nota está fuera del rango permitido
        }
    } catch (NumberFormatException e) {
        if (!esBorrar) {
            evt.consume(); // Consumir el evento si no se puede convertir el texto a un número flotante
        }
    }
    }//GEN-LAST:event_txtnota1KeyTyped

    private void txtnota2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnota2KeyTyped
        // TODO add your handling code here:
        // Obtener el carácter ingresado por el usuario
    char key = evt.getKeyChar();

    // Verificar si el carácter es un número, un punto decimal o la tecla de retroceso
    boolean esNumero = (key >= '0' && key <= '9');
    boolean esPunto = (key == '.');
    boolean esBorrar = (key == '\b');

    // Permitir solo números y un punto decimal
    if (!esNumero && !esPunto && !esBorrar) {
        evt.consume(); // Consumir el evento para evitar que se ingrese el carácter
    }

    // Verificar si ya hay un punto decimal en el texto
    String text = txtnota2.getText();
    boolean tienePunto = text.contains(".");

    // Permitir solo un punto decimal
    if (tienePunto && esPunto) {
        evt.consume(); // Consumir el evento si ya hay un punto decimal en el texto
    }

    // Verificar si la longitud total del texto es mayor que 4 (dos enteros y dos decimales)
    if (text.replace(".", "").length() >= 4 && key != '\b') {
        evt.consume(); // Consumir el evento para evitar que se ingrese más caracteres
    }

    // Verificar si el texto ingresado representa un número válido en el rango de 0 a 10
    try {
        String textAfter = text + key;
        float nota = Float.parseFloat(textAfter); // Convertir el texto a un número flotante
        if (nota < 0 || nota > 10) {
            evt.consume(); // Consumir el evento si la nota está fuera del rango permitido
        }
    } catch (NumberFormatException e) {
        if (!esBorrar) {
            evt.consume(); // Consumir el evento si no se puede convertir el texto a un número flotante
        }
    }
    }//GEN-LAST:event_txtnota2KeyTyped

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here
        // Verifica si se ha seleccionado una fila en la tabla
    int selectedRow = jtNotas.getSelectedRow();
    if (selectedRow != -1) {
        // Obtiene los datos del estudiante de la fila seleccionada
        DatosEstudiantes datosEstudiantes = DatosE.get(selectedRow);
        
        // Muestra las notas en los campos de texto
        txtBuscarCedula.setText(datosEstudiantes.getCedula());
        txtNombre.setText(datosEstudiantes.getNombre());
        txtApellido.setText(datosEstudiantes.getApellido());
        //txtCarrera.setText(datosEstudiantes.getCarrera());
        //txtSemestre.setText(String.valueOf(datosEstudiantes.getSemestre()));
        cmbMaterias.setSelectedItem(datosEstudiantes.getmateria());
        txtnota1.setText(String.valueOf(datosEstudiantes.getParcial1()));
        txtnota2.setText(String.valueOf(datosEstudiantes.getParcial2()));
        
        // Habilita los campos de texto para edición
        habilitarCamposNotas(true);
        
        // Asigna el objeto DatosEstudiantes al botón o a una variable para usarlo en la actualización
        // Esto puede ser útil para actualizar los datos en la base de datos o en la lista cuando se guarde
        estudianteSeleccionado = datosEstudiantes;
    } else {
        // Muestra un mensaje de error si no se selecciona ninguna fila
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para editar", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCambiosActionPerformed
        // TODO add your handling code here:
        if (estudianteSeleccionado != null) {
        // Lee las nuevas notas de los campos de texto
        float nuevaNota1 = Float.parseFloat(txtnota1.getText());
        float nuevaNota2 = Float.parseFloat(txtnota2.getText());
        
        // Calcula el nuevo promedio y estado
        float nuevoPromedio = (nuevaNota1 + nuevaNota2) / 2;
        String nuevoEstado = (nuevoPromedio >= 7) ? "Aprobado" : "Reprobado";
        
        // Actualiza las notas y otros datos en el objeto DatosEstudiantes
        estudianteSeleccionado.setParcial1(nuevaNota1);
        estudianteSeleccionado.setParcial2(nuevaNota2);
        estudianteSeleccionado.setPromedio(nuevoPromedio);
        estudianteSeleccionado.setEstado(nuevoEstado);
        
        // Actualiza la tabla con los nuevos datos
        // Por ejemplo, podrías tener un método para actualizar la fila en la tabla
        actualizarFilaEnTabla(estudianteSeleccionado);
        
        // Deshabilita los campos de texto
        habilitarCamposNotas(false);
        
        // Muestra un mensaje de confirmación
        JOptionPane.showMessageDialog(this, "Datos actualizados correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
    } else {
        JOptionPane.showMessageDialog(this, "No hay un estudiante seleccionado para actualizar", "Error", JOptionPane.ERROR_MESSAGE);
    }
        modeltable.fireTableDataChanged();//actualiza modelo de la tabla
        limpiarCampos();//limpiar campos
    }//GEN-LAST:event_btnGuardarCambiosActionPerformed

    private void bttVernotasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttVernotasActionPerformed
        // TODO add your handling code here:
        List<DatosEstudiantes> listaEstudiantes = NotasparaEstudiantes.getDestudiantes();

        Mostrar abrirMostrar= new Mostrar(listaEstudiantes);
        abrirMostrar.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_bttVernotasActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnGuardarCambios;
    private javax.swing.JButton bttGuardarNotas;
    private javax.swing.JButton bttVernotas;
    private javax.swing.JComboBox<String> cmbMaterias;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtNotas;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtBuscarCedula;
    private javax.swing.JTextField txtCarrera;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSemestre;
    private javax.swing.JTextField txtestado;
    private javax.swing.JTextField txtnota1;
    private javax.swing.JTextField txtnota2;
    private javax.swing.JTextField txtpromedio;
    // End of variables declaration//GEN-END:variables
}
